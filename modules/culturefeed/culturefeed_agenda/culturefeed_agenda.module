<?php
use Symfony\Component\Console\Output\NullOutput;

/**
 * @file
 * Performs searches to the Cultuurnet api.
 */
define('CULTUREFEED_AGENDA_ACTOR_PROGRAM_NUM_ITEMS', 15);

module_load_include('inc', 'culturefeed_agenda', 'includes/helpers');

/**
 * Implements hook_theme().
 */
function culturefeed_agenda_theme() {

  $theme = array();
  $path = drupal_get_path('module', 'culturefeed_agenda') . '/theme';
  $item_types = array('event', 'production', 'actor');

  foreach ($item_types as $type) {

    $theme['culturefeed_' . $type . '_summary'] = array(
      'variables' => array('item' => NULL),
      'template' => 'culturefeed-' . $type . '-summary',
      'path' => $path,
      'file' => 'theme.inc',
    );

    $theme['culturefeed_' . $type . '_short_summary'] = array(
      'variables' => array('item' => NULL),
      'template' => 'culturefeed-' . $type . '-short-summary',
      'path' => $path,
      'file' => 'theme.inc',
    );
    
    $theme['culturefeed_' . $type . '_mini_summary'] = array(
      'variables' => array('item' => NULL),
      'template' => 'culturefeed-' . $type . '-mini-summary',
      'path' => $path,
      'file' => 'theme.inc',
    );
    $theme['culturefeed_' . $type] = array(
      'variables' => array('item' => NULL),
      'template' => 'culturefeed-' . $type,
      'path' => $path,
      'file' => 'theme.inc',
    );

  }

  $theme['culturefeed_agenda_actor_program'] = array(
    'variables' => array('items' => array(), 'actor' => NULL),
    'template' => 'culturefeed-agenda-actor-program',
    'path' => $path,
    'file' => 'theme.inc',
  );

  $theme['culturefeed_agenda_actor_program_item'] = array(
    'variables' => array('item' => array()),
    'template' => 'culturefeed-agenda-actor-program-item',
    'path' => $path,
    'file' => 'theme.inc',
  );

  $theme['culturefeed_agenda_production_program'] = array(
    'variables' => array('items' => array(), 'provinces' => array()),
    'template' => 'culturefeed-agenda-production-program',
    'path' => $path,
    'file' => 'theme.inc',
  );

  $theme['culturefeed_agenda_related_activities'] = array(
    'variables' => array('results' => array()),
    'template' => 'culturefeed-agenda-related-activities',
    'path' => $path,
    'file' => 'theme.inc',
  );

  $theme['culturefeed_agenda_de_lijn_widget'] = array(
    'variables' => array('item' => ''),
    'template' => 'culturefeed-agenda-delijn-widget',
    'path' => $path,
    'file' => 'theme.inc',
  );

  $theme['culturefeed_agenda_travel_map'] = array(
    'variables' => array(),
    'template' => 'culturefeed-agenda-travel-map',
    'path' => $path,
  );

  return $theme;

}

/**
 * Implements hook_menu().
 */
function culturefeed_agenda_menu() {

  $items = array();

  // Menu path for detail pages.
  $items['agenda/a/%/%culturefeed_agenda_actor'] = array(
    'title callback' => 'culturefeed_agenda_detail_title',
    'title arguments' => array(3),
    'page callback' => 'culturefeed_agenda_detail_page',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['agenda/e/%/%culturefeed_agenda_event'] = array(
    'title callback' => 'culturefeed_agenda_detail_title',
    'title arguments' => array(3),
    'page callback' => 'culturefeed_agenda_detail_page',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['agenda/p/%/%culturefeed_agenda_production'] = array(
    'title callback' => 'culturefeed_agenda_detail_title',
    'title arguments' => array(3),
    'page callback' => 'culturefeed_agenda_detail_page',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['delijn/agenda/a/%/%culturefeed_agenda_actor'] = array(
    'title callback' => 'culturefeed_agenda_detail_title',
    'title arguments' => array(4),
    'page callback' => 'culturefeed_agenda_page_de_lijn_widget',
    'page arguments' => array(4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['delijn/agenda/e/%/%culturefeed_agenda_event'] = array(
    'title callback' => 'culturefeed_agenda_detail_title',
    'title arguments' => array(4),
    'page callback' => 'culturefeed_agenda_page_de_lijn_widget',
    'page arguments' => array(4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['map/agenda/a/%/%culturefeed_agenda_actor'] = array(
    'title callback' => 'culturefeed_agenda_detail_title',
    'title arguments' => array(4),
    'page callback' => 'culturefeed_agenda_page_map',
    'page arguments' => array(4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['map/agenda/e/%/%culturefeed_agenda_event'] = array(
    'title callback' => 'culturefeed_agenda_detail_title',
    'title arguments' => array(4),
    'page callback' => 'culturefeed_agenda_page_map',
    'page arguments' => array(4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  // Autocomplete for event / production suggestions
  $items['autocomplete/culturefeed/activity-suggestion'] = array(
    'page callback' => 'culturefeed_agenda_activity_suggestion_autocomplete_page',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['autocomplete/culturefeed/activity-suggestion/past'] = array(
    'page callback' => 'culturefeed_agenda_activity_suggestion_autocomplete_page',
    'page arguments' => array(4, TRUE),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/pages.inc',
  );

  $items['admin/config/culturefeed/agenda'] = array(
    'title' => 'CultureFeed Agenda',
    'description' => t('Change CultureFeed agenda settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_agenda_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/admin.inc',
  );

  return $items;

}

/**
 * Implements hook_culturefeed_search_page_info().
 */
function culturefeed_agenda_culturefeed_search_page_info() {
  return array(
    'activiteiten' => array(
      'path' => 'agenda/search',
      'page_title' => t('Agenda'),
      'search_title' => t('Activities'),
      'sort_default' => variable_get('culturefeed-agenda-default-sort', 'date'),
      'sort_options' => array(
        'relevancy' => t('Relevance'),
        'date' => t('Date'),
        'recommend_count' => t('Recommended'),
        'comment_count' => t('Reactions'),
      ),
      'class_name' => 'CultureFeedAgendaPage',
      'weight' => -20,
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function culturefeed_agenda_block_info() {

  $blocks = array();

  $blocks['agenda-related-activities'] = array(
    'info' => t('Culturefeed agenda: related activities'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $blocks['agenda-search-block'] = array(
    'info' => t('Culturefeed agenda: search events'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['actor-program'] = array(
    'info' => t('Culturefeed agenda: actor program'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['production-program'] = array(
    'info' => t('Culturefeed agenda: production program'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  return $blocks;

}

/**
 * Implements hook_block_configure().
 */
function culturefeed_agenda_block_configure($delta) {

  $form = array();

  if ($delta == 'agenda-related-activities') {

    $options = array('' => t('None'));
    $options += culturefeed_search_get_domains();
    $form['agenda_related_activities_context'] = array(
      '#title' => t('Category type to search related events'),
      '#type' => 'select',
      '#options' => $options,
      '#default_value' => variable_get('agenda_related_activities_context'),
      '#description' => t('The category type to use for searching related activities. Leave empty if you only want to search on range.')
    );

    $form['agenda_related_activities_range'] = array(
      '#title' => t('Radius to search in km'),
      '#type' => 'textfield',
      '#default_value' => variable_get('agenda_related_activities_range', 0),
      '#description' => t('Search on the given radius. Leave empty to skip radius search. Radius search will only be done when viewing an event.'),
    );

    $form['agenda_related_activities_extra_query'] = array(
      '#title' => t('Extra filter query for the result set'),
      '#type' => 'textfield',
      '#default_value' => variable_get('agenda_related_activities_extra_query'),
      '#description' => t('Make sure this is a correct solr query. Example title=mytitle'),
    );

    $form['agenda_related_activities_sort'] = array(
      '#title' => t('Sort field'),
      '#type' => 'textfield',
      '#default_value' => variable_get('agenda_related_activities_sort'),
      '#description' => t('Field to sort on. Example startdate'),
    );

    $form['agenda_related_activities_sort_direction'] = array(
      '#title' => t('Sort direction'),
      '#type' => 'select',
      '#options' => array(
        \CultuurNet\Search\Parameter\Sort::DIRECTION_ASC => t('Ascending'),
        \CultuurNet\Search\Parameter\Sort::DIRECTION_DESC => t('Descending'),
      ),
      '#default_value' => variable_get('agenda_related_activities_sort_direction', 'asc'),
    );

    $form['agenda_related_activities_total_items'] = array(
      '#title' => t('Items to show'),
      '#type' => 'textfield',
      '#default_value' => variable_get('agenda_related_activities_total_items', 5),
    );

  }

  elseif ($delta == 'agenda-search-block') {

    $options = array('' => t('None'));
    $options += culturefeed_search_get_domains();

    $form['agenda_search_block_domain_id'] = array(
      '#title' => t('Categories to show in the dropdown'),
      '#type' => 'select',
      '#options' => $options,
      '#default_value' => variable_get('agenda_search_block_domain_id'),
    );

  }

  return $form;

}

/**
 * Implements hook_block_save().
 */
function culturefeed_agenda_block_save($delta, $edit) {

  if ($delta == 'agenda-related-activities') {
    variable_set('agenda_related_activities_context', $edit['agenda_related_activities_context']);
    variable_set('agenda_related_activities_range', $edit['agenda_related_activities_range']);
    variable_set('agenda_related_activities_extra_query', $edit['agenda_related_activities_extra_query']);
    variable_set('agenda_related_activities_sort', $edit['agenda_related_activities_sort']);
    variable_set('agenda_related_activities_sort_direction', $edit['agenda_related_activities_sort_direction']);
    variable_set('agenda_related_activities_total_items', $edit['agenda_related_activities_total_items']);
  }
  elseif ($delta == 'agenda-search-block') {
    variable_set('agenda_search_block_domain_id', $edit['agenda_search_block_domain_id']);
  }

}

/**
 * Implements hook_block_view().
 */
function culturefeed_agenda_block_view($delta) {

  module_load_include('inc', 'culturefeed_agenda', 'includes/blocks');
  $block = array();

  switch ($delta) {

    case 'agenda-related-activities':
      return culturefeed_agenda_block_related_activities();

    case 'agenda-search-block':
      $block['content'] = drupal_get_form('culturefeed_agenda_search_block_form');
    break;

    case 'actor-program':
      return culturefeed_agenda_block_actor_program();

    case 'production-program':
      return culturefeed_agenda_block_production_program();

  }

  return $block;

}

/**
 * Implements hook_culturefeed_search_ui_active_filters().
 */
function culturefeed_agenda_culturefeed_search_ui_active_filters($culturefeedFacetingComponent) {

  $query = drupal_get_query_parameters(NULL, array('q', 'page'));
  $path = current_path();
  $build = array();

  // Check the actor key.
  if (isset($query['actor'])) {
    $actor = culturefeed_agenda_actor_load($query['actor']);
    $search_query = $query;
    unset($search_query['actor']);
    $url = url($path, array('query' => $search_query));
    $build['nearby'] = array(
      '#theme' => 'culturefeed_search_active_filters_item',
      '#label' => t('Near ') . check_plain($actor->getTitle(culturefeed_search_get_preferred_language())),
      '#url' => $url,
    );
  }

  return $build;

}

/**
 * Implements hook_url_outbound_alter().
 */
function culturefeed_agenda_url_outbound_alter(&$path, &$options, $original_path) {

  if ($path == 'agenda/search') {

    $type = '';
    $term_slugs = &drupal_static('culturefeed_search_term_slugs', array());
    $city_slugs = &drupal_static('culturefeed_search_city_slugs', array());

    $facets = isset($options['query']['facet']) ? $options['query']['facet'] : array();
    $location = isset($options['query']['location']) ? $options['query']['location'] : NULL;

    // Check if this url is goïng to filter on event type.
    if (!empty($facets['category_eventtype_id'])) {

      // Set the new path for this category. Keep the slug static cached.
      if (!isset($term_slugs[$facets['category_eventtype_id'][0]])) {
        $term_slugs[$facets['category_eventtype_id'][0]] = db_query('SELECT slug FROM {culturefeed_search_terms} WHERE tid = :tid AND language = :language', array(':tid' => $facets['category_eventtype_id'][0], ':language' => culturefeed_search_get_preferred_language()))->fetchField();
      }
      $type = $term_slugs[$facets['category_eventtype_id'][0]];
      $path = 'agenda/' . $type;

      // Remove the facet, and check if this was the only one.
      unset($options['query']['facet']['category_eventtype_id']);

    }

    // Only do something if location is a city that has a postal.
    if (!empty($location)) {

      $city_parts = explode(' ', $location);

      // The search contains a zip code. Search city by zip + name.
      if (is_numeric($city_parts[0])) {

        if (count($city_parts) == 2) {
          // Static cache the result.
          if (!isset($city_slugs[$city_parts[0]][$city_parts[1]])) {
            $city_slugs[$city_parts[0]][$city_parts[1]] = db_query('SELECT slug FROM {culturefeed_search_cities} WHERE zip = :zip AND name = :name', array(':zip' => $city_parts[0], ':name' => $city_parts[1]))->fetchField();
          }
          $location_slug = $city_slugs[$city_parts[0]][$city_parts[1]];
        }
      }
      // The search contains only a city / region name. Search on full name.
      else {

        // Static cache it.
        if (!isset($term_slugs[$location])) {
          $term_slugs[$location] = db_query("SELECT slug FROM {culturefeed_search_terms} WHERE name = :name AND did = 'flandersregion'", array(':name' => $location))->fetchField();
        }
        $location_slug = $term_slugs[$location];

      }

      if (!empty($location_slug)) {
        unset($options['query']['location']);
        $type = $type ? : 'alle';
        $path = 'agenda/' . $type . '/' . $location_slug;
      }
    }

    // Rewrite facet on theme.
    if (isset($facets['category_theme_id'][0])) {

      if (!isset($term_slugs[$facets['category_theme_id'][0]])) {
        $term_slugs[$facets['category_theme_id'][0]] = db_query('SELECT slug FROM {culturefeed_search_terms} WHERE tid = :tid AND language = :language', array(':tid' => $facets['category_theme_id'][0], ':language' => culturefeed_search_get_preferred_language()))->fetchField();
      }

      $options['query']['theme'] = $term_slugs[$facets['category_theme_id'][0]];
      unset($options['query']['facet']['category_theme_id']);

    }

    // Always unset wregIds and regId.
    if (isset($options['query']['regId'])) {
      unset($options['query']['regId']);
    }

    // Make sure we leave no empty query data.
    // This one is needed, otherwise you can end with following url: agenda/sportactiviteit?&theme=fitness-gymnastiek-dans-en-vechtsport
    if (!empty($options['query'])) {

      foreach ($options['query'] as $key => $requested_query) {

        // If the element has subitems (facet query for example), check if subitems are not empty.
        if (is_array($requested_query)) {
          $has_sub_query = FALSE;
          foreach ($requested_query as $requested_subquery) {
            if (!empty($requested_subquery)) {
              $has_sub_query = TRUE;
            }
          }

          if (!$has_sub_query) {
            unset($options['query'][$key]);
          }
        }
        elseif (empty($options['query'][$key])) {
          unset($options['query'][$key]);
        }

      }

    }

  }

}

/**
 * Implements hook_url_inbound_alter().
 */
function culturefeed_agenda_url_inbound_alter(&$path, $original_path, $path_language) {

  // Catch old D6 urls.
  if ($path == 'agenda/r') {
    $path = 'agenda/search';
  }

  // Only check on agenda pages.
  if (arg(0, $path) == 'agenda') {

    // Always check if we need to alter the theme.
    if (isset($_GET['theme'])) {
      $category = culturefeed_search_get_category_by_slug($_GET['theme']);

      if ($category) {
        $_GET['facet']['category_theme_id'][] = $category->tid;
        $_REQUEST['facet']['category_theme_id'][] = $category->tid;
      }
      unset($_GET['theme']);
      unset($_REQUEST['theme']);

    }

    // A known search page, no need to alter the path.
    $search_page = _culturefeed_search_ui_get_active_search_page();
    if ($search_page) {
      return;
    }

    // If we are on a detail page, no need to alter the path.
    $object = culturefeed_search_get_active_object();
    if ($object) {
      return;
    }

    $rewrite = FALSE;

    // Check if we need to alter on category type.
    if (arg(1, $path) != 'alle') {
      if ($category = culturefeed_search_get_category_by_slug(arg(1, $path), 'eventtype')) {
        $_GET['facet']['category_eventtype_id'][] = $category->tid;
        $_REQUEST['facet']['category_eventtype_id'][] = $category->tid;
        $rewrite = TRUE;
      }
    }

    // Check if we need to alter location.
    $city_slug = arg(2, $path);
    if (!empty($city_slug)) {

      $city_parts = explode('-', $city_slug);
      // Slug contains postal. Search city.
      if (is_numeric($city_parts[0])) {
        /*$city = culturefeed_search_get_city_by_slug($city_slug);
        if ($city) {
          $location = $city->zip . ' ' . $city->name;
        }*/
        $flanders_region = culturefeed_search_get_category_by_slug($city_slug, 'flandersregion');
        if ($flanders_region) {
          $location = $flanders_region->name;
          $regId = $flanders_region->tid;
        }
      }
      // No postal, search flanders region.
      else {
        $flanders_region = culturefeed_search_get_category_by_slug($city_slug, 'flandersregion');
        if ($flanders_region) {
          $location = $flanders_region->name;
        }
      }

      if (!empty($location)) {
        $_GET['location'] = $location;
        $_REQUEST['location'] = $location;
        $rewrite = TRUE;
      }

      if (!empty($regId)) {
        $_GET['regId'] = $regId;
        $_REQUEST['regId'] = $regId;
        $rewrite = TRUE;
      }

    }

    // When rewrite flag is set, change the path.
    if ($rewrite) {
      $path = 'agenda/search';
    }

  }

}

/**
 * Title callback for agenda detail pages.
 */
function culturefeed_agenda_detail_title(\CultuurNet\Search\ActivityStatsExtendedEntity $item) {

  $details = $item->getEntity()->getDetails()->getDetailByLanguage(culturefeed_search_get_preferred_language());

  if ($details) {
    return $details->getTitle();
  }

}

/**
 * Load an event from the api.
 */
function culturefeed_agenda_event_load($cdb_id) {
  return culturefeed_search_item_load($cdb_id, 'event');
}

/**
 * Load an actor from the api.
 */
function culturefeed_agenda_actor_load($cdb_id) {
  return culturefeed_search_item_load($cdb_id, 'actor');
}

/**
 * Load a production from the api.
 */
function culturefeed_agenda_production_load($cdb_id) {
  return culturefeed_search_item_load($cdb_id, 'production');
}
