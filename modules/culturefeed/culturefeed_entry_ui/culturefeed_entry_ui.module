<?php
/**
 * @file
 * Hook implementations of CultureFeed Entry UI.
 */

// Category ids needed.
define('CULTUREFEED_ENTRY_UI_EVENTTYPE_CAT_ID_KIJKEN_EN_LUISTEREN', '0.100.0.0.0');
define('CULTUREFEED_ENTRY_UI_EVENTTYPE_CAT_ID_DOEN', '0.100.1.0.0');
define('CULTUREFEED_ENTRY_UI_EVENTTYPE_CAT_ID_BEZOEKEN', '0.100.2.0.0');

/**
 * Implements hook_permission().
 */
function culturefeed_entry_ui_permission() {
  return array(
    'manage object tags' => array(
      'title' => t('Manage object tags'),
      'description' => t('Manage all the tags from the objects on culturefeed (events, actors, ...).'),
    ),
    'manage custom tags' => array(
      'title' => t('Manage custom tags'),
      'description' => t('Manage custom tags from the objects on culturefeed (events, actors, ...) managed on the admin section.'),
    ),
    'create culturefeed events' => array(
      'title' => t('Create events'),
      'description' => t('Create new events through the entity api.'),
    ),
    'edit culturefeed events' => array(
      'title' => t('Edit events'),
      'description' => t('Edit events through the entity api.'),
    ),
    'delete culturefeed events' => array(
      'title' => t('Delete events'),
      'description' => t('Delete events through the entity api.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function culturefeed_entry_ui_theme() {

  return array(
    'culturefeed_entry_ui_opening_times_table' => array(
      'file' => 'theme/theme.inc',
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function culturefeed_entry_ui_menu() {

  $items = array();

  $items['agenda/e/%/%culturefeed_agenda_event/tags'] = array(
    'title' => 'Tags',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_entry_ui_edit_tags_form', 3),
    'access callback' => 'culturefeed_entry_ui_manage_tags_access',
    'file' => 'includes/culturefeed_entry_ui.pages.inc',
  );

  $items['agenda/e/add'] = array(
    'title' => 'New activity',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_entry_ui_event_form'),
    'access arguments' => array('create culturefeed events'),
    'file' => 'includes/culturefeed_entry_ui.pages.inc',
  );

  $items['agenda/e/%/%culturefeed_agenda_event/edit'] = array(
    'title' => 'Edit activity',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_entry_ui_event_form', 3),
    'access arguments' => array('edit culturefeed events'),
    'file' => 'includes/culturefeed_entry_ui.pages.inc',
  );

  $items['agenda/e/%/%culturefeed_agenda_event/delete'] = array(
    'title' => 'Delete activity',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_entry_ui_delete_event_form', 3),
    'access arguments' => array('delete culturefeed events'),
    'file' => 'includes/culturefeed_entry_ui.pages.inc',
  );

  $items['admin/config/culturefeed/entry_ui'] = array(
    'title' => 'CultureFeed Entry UI',
    'description' => 'All configurations to entry api for this site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('culturefeed_entry_ui_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/culturefeed_entry_ui.admin.inc',
  );

  return $items;

}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function culturefeed_entry_ui_menu_local_tasks_alter(&$data, $router_item, $root_path) {

  $id = '';
  if (arg(0) == 'agenda' && arg(1) == 'e') {
    $id = arg(3);
  }
  if (!$id) {
    return;
  }

  $event = culturefeed_search_item_load($id, 'event');
  $title = $event->getEntity()->getDetails()->getDetailByLanguage(culturefeed_search_get_preferred_language())->getTitle();
  $request_detail = array(
    'event' => $id,
    'title' => $title,
  );
  $path = culturefeed_search_detail_path($event->getType(), $id, $title);

  $tabs = array();
  // Add a tab for managing the tags.
  if (culturefeed_entry_ui_manage_tags_access()) {

    $link = array(
      'href' => $path . '/tags',
      'localized_options' => array(),
      'title' => t('Tags'),
    );

    $tabs[] = array('#theme' => 'menu_local_action', '#link' => $link);

  }
  
  $culturefeed_user = DrupalCultureFeed::getLoggedInUser();
  
  // Add tab for editing the event.
  if (user_access('edit culturefeed events') && ($event->getEntity()->getCreatedBy() == $culturefeed_user->mbox)) {

    $link = array(
      'href' => $path . '/edit',
      'localized_options' => array(),
      'title' => t('Edit'),
    );

    $tabs[] = array('#theme' => 'menu_local_action', '#link' => $link);

  }

  // Detail only exists when culturefeed_agenda is enabled.
  if ($tabs && module_exists('culturefeed_agenda')) {

    $request_detail = array(
      'event' => $id,
      'title' => $title,
    );

    $link = array(
      'href' => $path,
      'localized_options' => array(),
      'title' => t('View'),
    );
    $tab = array('#theme' => 'menu_local_action', '#link' => $link);
    array_unshift($tabs, $tab);

  }

  $data['tabs'] = array(
    0 => array(
      'output' => $tabs,
      'count' => count($tabs),
    ),
  );

}

/**
 * Load an event on the entry api.
 */
function entry_api_event_load($id) {

  static $events = array();
  if (isset($events[$id])) {
    return $events[$id];
  }

  try {
    $events[$id] = Drupalculturefeed_EntryApi::getEvent($id);
    return $events[$id];
  }
  catch (Exception $e) {
    watchdog_exception('culturefeed_entry_ui', $e, array(), WATCHDOG_ERROR);
  }

  $events[$id] = FALSE;

  return FALSE;

}

/**
 * Access callback, to check if a user has access to the manage tags screen.
 */
function culturefeed_entry_ui_manage_tags_access() {
  return user_access('manage custom tags') || user_access('manage object tags');
}

/**
 * Submit callback for the 'add more' buttons.
 */
function culturefeed_entry_ui_add_more_submit($form, &$form_state) {

  switch ($form_state['input']['_triggering_element_name']) {

    case 'datetimes_add_child':
      //  No need to add as the the add more button is already counted.
      $form_state['#dates_needed'] = count(element_children($form['basic']['when']['datetimes']));
      break;

    case (strpos($form_state['input']['_triggering_element_name'], 'datetimes_remove_child_') === 0):
      $remove = explode('datetimes_remove_child_', $form_state['input']['_triggering_element_name']);
      $remove = $remove[1];

      // Unset and reindex.
      unset($form_state['values']['datetimes'][$remove]);
      $datetimes = array();
      foreach ($form_state['values']['datetimes'] as $key => $datetime) {

        if (is_numeric($key)) {
          $datetimes[] = $datetime;
        }
        else {
          $datetimes[$key] = $datetime;
        }

      }
      $form_state['values']['datetimes'] = $datetimes;
      unset($form_state['input']['datetimes'][$remove]);
      $form_state['input']['datetimes'] = array_values($form_state['input']['datetimes']);
      // Don't forget to count the add more button.
      $form_state['#dates_needed'] = count(element_children($form['basic']['when']['datetimes'])) - 2;
      break;

    case (strpos($form_state['input']['_triggering_element_name'], 'datetimes_remove_end_') === 0):
      $remove = explode('datetimes_remove_end_', $form_state['input']['_triggering_element_name']);
      $remove = $remove[1];
      unset($form_state['values']['datetimes'][$remove]['end']);
      unset($form_state['input']['datetimes'][$remove]['end']);
      break;

    case 'links_add_more':
      $form_state['#links_needed'] = count(element_children($form['extra']['links'])) + 1;
      break;

    case 'opening_times_add_more':
      $form_state['#opening_times_needed'] = count(element_children($form['basic']['when']['period_or_permanent']['opening_times']['monday'])) + 1;
      break;
    
    case 'ld_add_more':
      $form_state['#ld_needed'] = TRUE;
      break;
    
    case 'price_add_more':
      $form_state['#price_needed'] = TRUE;
      break;
    
    case 'location_add_more':
      $form_state['#location_needed'] = TRUE;
      break;
      
    case 'actor_add_more':
      $form_state['#actor_needed'] = TRUE;
      break;
      
    case 'performers_add_more':
      $form_state['#performers_needed'] = count(element_children($form['extra']['performers']['wrapper']));
      break;
    
    case 'contacts_add_more':
      $form_state['#contacts_needed'] = count(element_children($form['extra']['contacts']['wrapper']));
      break;
      
    case 'languages_add_more':
      $form_state['#languages_needed'] = count(element_children($form['extra']['language']['wrapper']));
      break;
      
  }

  $form_state['rebuild'] = TRUE;

}

/**
 * Ajax form callback: Add a new row.
 *
 * Return the element that was set in the submit.
 */
function culturefeed_entry_ui_add_more_js($form, $form_state) {

  switch ($form_state['input']['_triggering_element_name']) {

    case 'begindates_add_more':
    case 'enddates_add_more':
    case (strpos($form_state['input']['_triggering_element_name'], 'datetimes_add_end_') === 0):
    case (strpos($form_state['input']['_triggering_element_name'], 'datetimes_remove_end_') === 0):
    case (strpos($form_state['input']['_triggering_element_name'], 'datetimes_remove_child_') === 0):
    case 'datetimes[0][begin][date]':
    case 'datetimes[0][end][date]':
    case 'datetimes_add_child':
    case 'permanent':
      return $form['basic']['when'];

    case 'timestamps_add_more':
      return $form['basic']['timestamps'];
      
    case 'country_select':
      if ($form_state['input']['country_select'] == 'BE') {
        $form['basic']['location']['new']['citywrapper']['city']['#autocomplete_path'] = 'autocomplete/culturefeed/city-suggestion';
        $form['basic']['location']['new']['citywrapper']['zip_code']['#attributes'] = array('style' => array('display:none;'));
        $form['basic']['location']['new']['citywrapper']['zip_code']['#title'] = '';
      } else {
	    $form['basic']['location']['new']['citywrapper']['city']['#autocomplete_path'] = '';
	    $form['basic']['location']['new']['citywrapper']['city']['#value'] = '';  
	    $form['basic']['location']['new']['citywrapper']['country']['#value'] = $form_state['input']['country_select'];
	    $form['basic']['location']['new']['citywrapper']['zip_code']['#attributes'] = array('style' => array('display:block;margin-right:30px;'));
	    $form['basic']['location']['new']['citywrapper']['zip_code']['#title'] = t('ZIP Code');
	    
      }
      return $form['basic']['location']['new']['citywrapper'];
      return $form['basic']['location']['new']['citywrapper']['zip_code'];

    case 'links_add_more':
      return $form['extra']['links'];

    case 'opening_times_add_more':
      return $form['basic']['period_or_permanent']['opening_times'];
      
    case 'price_add_more':
      return $form['extra']['price']['extra'];
      
    case 'ld_add_more':
      return $form['extra']['description']['ld'];
    
    case 'location_add_more':
      //$form['basic']['location']['add_new_location']['#attributes'] = array('style' => array('display:none;'));
      return $form['basic']['location'];
      
    case 'actor_add_more':
      return $form['extra']['organiser'];
    
    case 'performers_add_more':
      return $form['extra']['performers']['wrapper'];
      
    case 'contacts_add_more':
      return $form['extra']['contacts']['wrapper'];
    
    case 'languages_add_more':
      return $form['extra']['language']['wrapper'];
      
    case 'location[actor][location_actor_id]':
      return $form['basic']['location']['actor'];
      
    case 'organiser_actor_id':
      return $form['extra']['organiser']['actor'];
  }

}

/**
 * Get the language preferred for input on the Entry API.
 */
function culturefeed_entry_ui_get_preferred_language() {
  $language = variable_get('culturefeed_entry_ui_preferred_language', '');

  if (!$language) {
    $language = culturefeed_search_get_preferred_language();
  }

  return $language;
}

/**
 * Implements hook_views_api().
 */
function culturefeed_entry_ui_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module','culturefeed_entry_ui') . '/views',
  );
}

function culturefeed_entry_ui_entity_path(\CultuurNet\Search\ActivityStatsExtendedEntity $entity, $op) {

  if ($entity->getType() == 'event') {
    $id = $entity->getId();
    $entity = $entity->getEntity();
    $details = $entity->getDetails()->getDetailByLanguage(culturefeed_search_get_preferred_language());
    $name = $details->getTitle();
    $path = culturefeed_search_detail_path('event', $id, $name);
    return "{$path}/{$op}";
  }
}

/**
 * Implements hook_block_info_alter().
 */
function culturefeed_entry_ui_block_info_alter(&$blocks, $theme, $code_blocks) {
  $delta = '4abc71e4bcf51672335a80c2c3b6023e';
  if (isset($blocks[$delta])) {
    $block[$delta]['region'] = 'sidebar_second';
    $block[$delta]['status'] = 1;
  }
}

function culturefeed_entry_ui_remove_filter_input(&$form) {

  unset($form['format']['guidelines']);
  unset($form['format']['help']);
  return $form;
}

/**
 * Implements hook_culturefeed_ui_profile_box_main_items().
 */
function culturefeed_entry_ui_culturefeed_ui_profile_box_main_items() {

  $items = array();
  try {

    $items['entry'] = array(
      'data' => l(t('Add event'),'agenda/e/add'),
      'class' => 'entry',
      'weight' => -10,
    );

  } catch (Exception $e) {
    watchdog_exception('culturefeed_entry_ui', $e);
  }

  return $items;
}
